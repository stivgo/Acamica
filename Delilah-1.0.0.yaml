---
swagger: "2.0"
info:
  description: "Descripción de la API Delilah Store para el manejo de pedidos"
  version: "1.0.0"
  title: "Delilah Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "stiveng0630@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/stivgo/Delilah/1.0.0"
tags:
- name: "productos"
  description: "Información de cada uno de los productos"
- name: "usuarios"
  description: "Acceso a la informción de los usuarios"
- name: "pedidos"
  description: "Información de los pedidos realizados por los usuarios"
schemes:
- "https"
paths:
  /productos:
    get:
      tags:
      - "productos"
      summary: "Update an existing pet"
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Productos"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    post:
      tags:
      - "productos"
      summary: "Añade un nuevo producto al sistema"
      operationId: "añadirProductos"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Productos"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /productos/{Id}:
    get:
      tags:
      - "productos"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Productos"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    put:
      tags:
      - "productos"
      summary: "Updates a pet in the store with form data"
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "productos"
      summary: "Deletes a pet"
      operationId: "deletePet"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "Id"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /registrarse:
    post:
      tags:
      - "usuarios"
      summary: "Place an order for a pet"
      operationId: "placeOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Usuarios"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/"
        "400":
          description: "Invalid Order"
  /login:
    post:
      tags:
      - "usuarios"
      summary: "Place an order for a pet"
      operationId: "LplaceOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Usuarios"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/"
        "400":
          description: "Invalid Order"
  /usuarios:
    get:
      tags:
      - "usuarios"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /usuarios/{Id}:
    get:
      tags:
      - "usuarios"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\\\
        \ \\ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 1E+1
        minimum: 1
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Usuarios"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    put:
      tags:
      - "usuarios"
      summary: "Updates a pet in the store with form data"
      operationId: "LupdatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "usuarios"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\\\
        \ \\ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /pedidos:
    get:
      tags:
      - "pedidos"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
    post:
      tags:
      - "pedidos"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Pedidos"
      responses:
        default:
          description: "successful operation"
  /pedidos/{Id}:
    put:
      tags:
      - "pedidos"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "Id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Pedidos"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Productos:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Usuarios:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pedidos:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  PedidosxProducto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
